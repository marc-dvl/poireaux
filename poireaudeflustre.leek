//--------------------------------
//------- ma petite IA bientot intelligente -----------
//--------------------------------

////////////////////////////////////// ლ(･ω･*ლ ) fonctions ε=(｡ﾉ･ω･ )ﾉ /////////////////////////////////////
function kicknull(array){
var newarray=[]
for(var k in array){
	if (k != null){
		push(newarray, k)}
	}
return newarray
}
function cases(tot_mp,enemy,cell){
var x,y =0
	var positions =[]
	var posx = getCellX(cell)
	var posy = getCellY(cell)  
	for (x= -tot_mp; x<= tot_mp; x++) { //boulce des coords des cases atteignables
		for (y= -tot_mp; y<= tot_mp; y++){
			var cellule = getCellFromXY(posx+x,posy+y);
			if (cellule !== null 
			 and abs(x)+abs(y)<=tot_mp 
			 and isObstacle(cellule)=== false){ // conditions bonne case
					push(positions,cellule);
				}
			}
		}
	return positions
}
function cases_avec_ldv(tot_mp,enemy,cell) {
	// une fonction retournant les cases atteignables à partir d'une case avec un certain nb de mp 'd'où on peut tirer sur un ennemi
	var x,y =0
	var positions =[]
    var positions_ldv = []
	var posx = getCellX(cell)
	var posy = getCellY(cell)  
	for (x= -tot_mp; x<= tot_mp; x++) { //boulce des coords des cases atteignables
		for (y= -tot_mp; y<= tot_mp; y++){
			var cellule = getCellFromXY(posx+x,posy+y);
			if (cellule !== null 
			 and abs(x)+abs(y)<=tot_mp 
			 and isObstacle(cellule)=== false){ // conditions bonne case
					push(positions,cellule);
				if(lineOfSight(cellule,getCell(enemy)) == true){ //si on a la ldv
					push(positions_ldv, cellule)}
				}
			}
		}
	return positions_ldv
}
function case_plus_eloignee(cellules,entity) {
//rendre la case qui permet de tirer sur l'ennemi à partir des cases atteignables en utilisant le moins de PM / en s'écartant le plus de lui
	var n_cellule_choisie = 0
	var dist_positions = []
	for(var cellule in cellules){
		var dist = getDistance(cellule, getCell(entity))
		push(dist_positions,dist)
	}
debug(dist_positions)
debug(arrayMax(dist_positions))
	n_cellule_choisie = search(dist_positions,arrayMax(dist_positions)) // on prend la c la plus loin de l'ennemi
	return cellules[n_cellule_choisie]
}
function case_plus_proche(cellules,entity) {
//rendre la case qui permet de tirer sur l'ennemi à partir des cases atteignables en utilisant le moins de PM / en s'écartant le plus de lui
	var n_cellule_choisie = 0
	var dist_positions = []
	for(var cellule in cellules){
		var dist = getDistance(cellule, getCell(entity))
		push(dist_positions,dist)
	}
	n_cellule_choisie = search(dist_positions,arrayMin(dist_positions)) // on prend la c la plus loin de l'ennemi
	return cellules[n_cellule_choisie]
}
///////////////// (ง ͠° ͟ʖ ͡°)ง Tour de jeu (ง'̀-'́)ง ///////////////////////
// menace potentielle 
var enemy = getNearestEnemy();
var moi = getEntity();
var portee_max = getWeaponMaxRange(getWeapon(enemy)+getMP(enemy));
// trouver cellule de tir
var cases_cible = cases_avec_ldv(getMP(),enemy,getCell()) 
debug (cases_cible);
var case_tir = case_plus_proche(cases_cible,moi)
//deplacement
debug (case_tir)
moveTowardCell(case_tir)

// tir 
setWeapon(WEAPON_PISTOL); // coûte x PT
useWeapon(enemy);

//trouver cellule de fuite 
var case_fuite = case_plus_eloignee(cases(getMP(),enemy,getCell()),moi)
debug(case_fuite)
moveTowardCell(case_fuite)


// idées au fur et à mesure :
// compter la distance en cellules pas en dist absolue
// dans une partie le poireau n'avait aucune ldv dès le début : il a attendu au lieu de se set up dans une position d'où il pouvait piéger facilement
